version: 2.1

commands:
  install_awscli:
    description: Install aws cli v2
    steps:
      - run : 
          name : install aws cli v2 
          command : |
            curl -k -L -s --compressed "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
              -o "awscliv2.zip"
            sudo apt install -y unzip  
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible: 
    description : install ansible 
    steps:
      - run :
          name : install ansible 
          command : |
            sudo apt update
            sudo apt install -y software-properties-common 
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install -y ansible 
  install_nodejs:
    description: install node js 
    steps: 
    - run :
        name : install node js 
        command : |
          curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash - 
          sudo apt install -y nodejs 
          # curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - 
          # sudo apt install -y nodejs
          # sudo npm install --global n 
          # sudo n 13.8.0           

  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}  
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
              if(( $SUCCESS==1 )); 
              then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              fi
              
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end scan
          command: |
            # cd frontend
            # npm install
            # npm audit fix --force  
            # npm audit fix --force --audit-level=critical      
            # npm audit fix --force --audit-level=critical                    
            # # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
            exit 0

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit fix --force  
            npm audit fix --force --audit-level=critical           
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUPLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            echo $BACKEND_PUPLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
       - image : cimg/base:stable 
    steps:
      - checkout
      - install_ansible 
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["eb:dc:fb:3c:e4:3a:7b:6c:1a:b6:29:1b:f3:c1:a7:33"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install -y
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            # echo "has been executed successfully." > ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              echo ${KVDB_BUCKET}
            fi   
      - destroy-environment
      - revert-migrations     

  deploy-frontend:
    docker:
      - image : cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli 
      - restore_cache:
          keys: [frontend-deps]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            # BACKEND_PUPLIC_IP=$(aws ec2 describe-instances \
            #   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --query 'Reservations[*].Instances[*].PuplicIpAddress' \
            #   --output text)
            BACKEND_PUPLIC_IP=$(sed -n '2p' ~/project/.circleci/ansible/inventory.txt)
            echo "API_URL=http://${BACKEND_PUPLIC_IP}:3030" >>frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations       
                    
  deploy-backend:
    docker:
      - image : cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli 
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["eb:dc:fb:3c:e4:3a:7b:6c:1a:b6:29:1b:f3:c1:a7:33"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend 
            npm install
      - run:
          name: Package backend
          command: |
            cd backend
            npm run build 
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations 
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migration/*.ts
            cd ./.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image : cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli 
      - install_ansible
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUPLIC_IP=$(sed -n '2p' ~/project/.circleci/ansible/inventory.txt)
            # BACKEND_PUPLIC_IP=$(aws ec2 describe-instances \
            #   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --query 'Reservations[*].Instances[*].PuplicIpAddress' \
            #   --output text)
            export API_URL="http://${BACKEND_PUPLIC_IP}:3030"
            echo "${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            echo $FRONTEND_WEBSITE
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi 

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image : cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli 
      - run:
          name: Savo Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "old_workflow_id: " ${OLD_WORKFLOW_ID}
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - destroy-environment
      - revert-migrations                    


  cleanup:
      docker:
        - image : cimg/base:stable
      steps:
        - checkout
        - install_awscli 
        - run:
            name: Get old stack workflow id
            command: |
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}" 
              export OldWorkflowID=$( curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
              echo "old_workflow_id: " ${OldWorkflowID}

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]